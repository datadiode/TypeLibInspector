<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************************
 $Revision: 1.3 $
 $Date: 2010/07/29 14:29:00 $
 Author: doudou
 Description: Template for HTML exporter (single file).
 *************************************************************************** -->
<xsl:stylesheet version="2.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:xdt="http://www.w3.org/2005/xpath-datatypes"
    xmlns:p="http://autoitscript/tldoc/xslt">
    <!-- common templates -->
    <xsl:import href="tldoc-html-common.inc.xsl"/>
    <!-- functions -->
    <xsl:include href="tldoc-html-functions.inc.xsl"/>
    
    <xsl:output
        omit-xml-declaration="yes"
        encoding="UTF-8"
        indent="yes"
        method="html"
        media-type="text/html"
        exclude-result-prefixes="xsl xs fn xdt p"/>
    
    <xsl:param name="respath">./</xsl:param>
    <xsl:param name="definitions" select="document('tldoc-defs.inc.xml')"/>
    
    <!-- entry point -->
    <xsl:template match="/">
<html>
    <head>
        <title>Type Library Inspector: <xsl:value-of select="/TypeLib/@name"/></title>
<style type="text/css">
<xsl:comment>
body {
    font-family: Tahoma, Arial, Helvetica, sans-serif;
    font-size: 80%;
}
dt {
    font-style: italic; 
}
h1 {
    padding: 4px;
    font-size: 1.4em;
    margin: 10px 0;
}
h2 {
    color: white;
    background-color: darkblue;
    padding: 4px;
    font-size: 1.3em;
    margin: 15px 0;
}
h3 {
    font-size: 1.2em;
    margin: 10px 0;
}
h4 {
    font-size: 1.1em;
    margin: 5px 0;
}
p {
    margin: 0;
    padding: 5px;
}
p, code, dfn {
    font-size: 1.0em;
}
tt, code, pre, kbd {
    font-family: Courier New, monospace;
}
ul, ol, dl {
    margin: 0;
    padding: 0;
}
ul li, ol li {
    margin-left: 2em;
}
sup {
    line-height: 1.0em;
    font-size: x-small;
    font-weight: bold;
}
a:link, a:visited, a:active {
    text-decoration: none;
}
a:hover, a:focus {
    text-decoration: underline;
}
.icoleft, .icolefttop {
    padding-left: 18px;
    background-repeat: no-repeat;
}
.icoleft {
    background-position: left center;
}
.icolefttop {
    background-position: left top;
}
.Const {
    background-image: url(<xsl:value-of select="$respath"/>icons/Const.ico);
}
.PropertyRO {
    background-image: url(<xsl:value-of select="$respath"/>icons/PropertyRO.ico);
}
.Property {
    background-image: url(<xsl:value-of select="$respath"/>icons/Property.ico);
}
.PropertyGet {
    background-image: url(<xsl:value-of select="$respath"/>icons/PropertyGet.ico);
}
.PropertyPut {
    background-image: url(<xsl:value-of select="$respath"/>icons/PropertyPut.ico);
}
.PropertyPutRef {
    background-image: url(<xsl:value-of select="$respath"/>icons/PropertyPutRef.ico);
}
.Function {
    background-image: url(<xsl:value-of select="$respath"/>icons/Function.ico);
}
.DispInterface {
    background-image: url(<xsl:value-of select="$respath"/>icons/DispInterface.ico);
}
.Interface {
    background-image: url(<xsl:value-of select="$respath"/>icons/Interface.ico);
}
.CoClass {
    background-image: url(<xsl:value-of select="$respath"/>icons/CoClass.ico);
}
.Enum {
    background-image: url(<xsl:value-of select="$respath"/>icons/Enum.ico);
}
.Record {
    background-image: url(<xsl:value-of select="$respath"/>icons/Record.ico);
}
.Module {
    background-image: url(<xsl:value-of select="$respath"/>icons/Module.ico);
}
.Alias {
    background-image: url(<xsl:value-of select="$respath"/>icons/Alias.ico);
}
.Impl {
    background-image: url(<xsl:value-of select="$respath"/>icons/Impl.ico);
}
.VTable {
    background-image: url(<xsl:value-of select="$respath"/>icons/VTable.ico);
}
.Base {
    background-image: url(<xsl:value-of select="$respath"/>icons/Base.ico);
}
.TypeLib {
    background-image: url(<xsl:value-of select="$respath"/>icons/TypeLib.ico);
}
.onlinehelp {
    background-image: url(<xsl:value-of select="$respath"/>icons/help.ico);
}
.typename {
    color: #3366CC;
    font-family: Courier New, monospace;
}
.membsignature {
    border: solid 1px silver;
    background: #FFFFCC;
    display: block;
    padding: 10px;
}
.memblist {
    border: solid 1px silver;
    background: #F5F5F5;
}
.memblist li {
    list-style-type: none;
}
.membercontainer {
    padding-left: 10px;
    border-left: solid 25px #CCC;
}
.foot {
    background: #99CCFF;
    color: white;
    margin-top: 20px;
}
</xsl:comment>
</style>
    </head>
    <body>
        <a name="top"/>
        <xsl:apply-templates select="TypeLib" mode="top"/>
        <xsl:apply-templates select="TypeLib/Types/*" mode="top"/>
        <p class="foot">This document was generated by Type Library Inspector <xsl:text disable-output-escaping="yes">&amp;copy;</xsl:text> 2010</p>
    </body>
</html>
    </xsl:template>
    
    <xsl:template match="DispInterface | Interface | Record | Module | Enum" mode="top">
        <xsl:apply-imports/>
        <xsl:text> </xsl:text><a href="#top">Top of the page</a>
        <div class="membercontainer">
            <xsl:apply-templates select="Properties/*" mode="top"/>
        </div>
        <div class="membercontainer">
            <xsl:apply-templates select="Methods/*" mode="top"/>
        </div>
    </xsl:template>
    
    <xsl:template match="CoClass | Alias | Property | PropertyGet | PropertyPut | PropertyPutRef | Function" mode="top">
        <xsl:apply-imports/>
        <xsl:text> </xsl:text><a href="#top">Top of the page</a>
    </xsl:template>
    
    <xsl:template match="Help" mode="helplink">
        <xsl:if test="string-length(@file) &gt; 0">
            <a class="icoleft onlinehelp" title="View context help for this element" href="javascript:showHelp('{translate(@file, '\', '/')}', {@context})">Online Help</a>
        </xsl:if>
    </xsl:template>
    
    <xsl:template match="*[@name]" mode="linkedidentifier">
        <xsl:choose>
            <xsl:when test="local-name()='TypeLib' or local-name(..)='Types' or local-name(..)='Methods' or local-name(..)='Properties'"><a href="#{generate-id()}"><xsl:call-template name="identifier"/></a></xsl:when>
            <xsl:otherwise><xsl:call-template name="identifier"/></xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template match="*"/>
</xsl:stylesheet>
